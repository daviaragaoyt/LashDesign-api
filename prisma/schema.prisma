generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["lash_design"]
}

// MUDANÇA: Adicionado um Enum para padronizar os tipos de notificação.
// Isso evita erros de digitação e deixa o código mais claro.
enum TipoNotificacao {
  AGENDAMENTO_CRIADO
  AGENDAMENTO_CANCELADO
  LEMBRETE_ANIVERSARIO

  @@schema("lash_design")
}

model Pessoa {
  id             Int       @id @default(autoincrement())
  nome           String
  telefone       String?
  email          String?   @unique
  senha          String
  dataNascimento DateTime?
  endereco       String?
  role           Role      @default(CLIENTE)
  refreshToken   String?

  servicosOferecidos Servico[]     @relation("PrestadorServicos")
  agendamentos       Agendamento[] @relation("ClienteAgendamentos")

  // MUDANÇA: Substituído o campo genérico `Notificacao` por dois campos explícitos.
  // Isso nos permite saber exatamente quem enviou e quem recebeu a notificação.
  notificacoesRecebidas Notificacao[] @relation("NotificacoesRecebidas")
  notificacoesEnviadas  Notificacao[] @relation("NotificacoesEnviadas")

  @@map("pessoas")
  @@schema("lash_design")
}

model Servico {
  id          Int     @id @default(autoincrement())
  nome        String
  descricao   String?
  preco       Float
  duracao     Int
  imagem      String?
  prestadorId Int

  prestador   Pessoa        @relation("PrestadorServicos", fields: [prestadorId], references: [id])
  Agendamento Agendamento[]

  @@map("servicos")
  @@schema("lash_design")
}

model Agendamento {
  id         Int      @id @default(autoincrement())
  dataHora   DateTime
  clienteId  Int
  servicoId  Int
  disponivel Boolean  @default(true)

  cliente Pessoa  @relation("ClienteAgendamentos", fields: [clienteId], references: [id])
  servico Servico @relation(fields: [servicoId], references: [id], onDelete: Cascade)

  // MUDANÇA: Adicionada a relação de volta para Notificacao.
  notificacoes Notificacao[]

  @@map("agendamentos")
  @@schema("lash_design")
}

// MUDANÇA: Modelo `Notificacao` completamente reestruturado para ser mais descritivo.
model Notificacao {
  id          Int             @id @default(autoincrement())
  mensagem    String
  lida        Boolean         @default(false)
  tipo        TipoNotificacao // Usando o Enum que criamos
  dataCriacao DateTime        @default(now())

  // Relação com quem recebe a notificação (ex: o prestador)
  destinatario   Pessoa @relation("NotificacoesRecebidas", fields: [destinatarioId], references: [id], onDelete: Cascade)
  destinatarioId Int

  // Relação opcional com quem originou a ação (ex: o cliente que agendou)
  remetente   Pessoa? @relation("NotificacoesEnviadas", fields: [remetenteId], references: [id], onDelete: SetNull)
  remetenteId Int?

  // Relação opcional com o agendamento específico
  agendamento   Agendamento? @relation(fields: [agendamentoId], references: [id], onDelete: SetNull)
  agendamentoId Int?

  @@map("notificacoes")
  @@schema("lash_design")
}

enum Role {
  ADMIN
  USER
  CLIENTE
  PRESTADOR

  @@schema("lash_design")
}
